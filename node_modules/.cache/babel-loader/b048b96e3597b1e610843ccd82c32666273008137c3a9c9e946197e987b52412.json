{"ast":null,"code":"// import React, { useState } from \"react\";\n// import {\n//   Accordion,\n//   AccordionDetails,\n//   AccordionSummary,\n//   Box,\n//   Button,\n//   Card,\n//   CardContent,\n//   Dialog,\n//   DialogActions,\n//   DialogContent,\n//   DialogTitle,\n//   Divider,\n//   FormControl,\n//   Grid,\n//   InputLabel,\n//   MenuItem,\n//   Select,\n//   Stack,\n//   TextField,\n//   Typography,\n// } from \"@mui/material\";\n// import ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\n// import ApartmentIcon from \"@mui/icons-material/Apartment\";\n// import HotelIcon from \"@mui/icons-material/Hotel\";\n// import BedIcon from \"@mui/icons-material/Bed\";\n\n// const roomTypes = [\"normal\", \"delux\", \"super delux\"];\n// const paymentTypes = [\"MONTHLY\", \"QUARTERLY\", \"YEARLY\"];\n\n// const sampleFloors = [\n//   {\n//     floorNumber: 1,\n//     rooms: [\n//       { roomNumber: 101, roomType: \"normal\", status: \"booked\" },\n//       { roomNumber: 102, roomType: \"delux\", status: \"vacant\" },\n//       { roomNumber: 103, roomType: \"super delux\", status: \"booked\" },\n//       { roomNumber: 104, roomType: \"normal\", status: \"booked\" },\n//     ],\n//   },\n//   {\n//     floorNumber: 2,\n//     rooms: [\n//       { roomNumber: 201, roomType: \"normal\", status: \"booked\" },\n//       { roomNumber: 202, roomType: \"normal\", status: \"booked\" },\n//       { roomNumber: 203, roomType: \"normal\", status: \"booked\" },\n//       { roomNumber: 204, roomType: \"delux\", status: \"vacant\" },\n//       { roomNumber: 205, roomType: \"super delux\", status: \"booked\" },\n//       { roomNumber: 206, roomType: \"normal\", status: \"vacant\" },\n//     ],\n//   },\n//   {\n//     floorNumber: 3,\n//     rooms: [\n//       { roomNumber: 301, roomType: \"normal\", status: \"booked\" },\n//       { roomNumber: 302, roomType: \"normal\", status: \"booked\" },\n//       { roomNumber: 303, roomType: \"normal\", status: \"booked\" },\n//       { roomNumber: 304, roomType: \"delux\", status: \"vacant\" },\n//       { roomNumber: 305, roomType: \"super delux\", status: \"booked\" },\n//       { roomNumber: 306, roomType: \"normal\", status: \"vacant\" },\n//     ],\n//   },\n//   {\n//     floorNumber: 4,\n//     rooms: [\n//       { roomNumber: 401, roomType: \"normal\", status: \"booked\" },\n//       { roomNumber: 402, roomType: \"normal\", status: \"booked\" },\n//       { roomNumber: 403, roomType: \"normal\", status: \"booked\" },\n//       { roomNumber: 404, roomType: \"delux\", status: \"vacant\" },\n//       { roomNumber: 405, roomType: \"super delux\", status: \"booked\" },\n//       { roomNumber: 406, roomType: \"normal\", status: \"vacant\" },\n//     ],\n//   },\n//   {\n//     floorNumber: 5,\n//     rooms: [\n//       { roomNumber: 501, roomType: \"normal\", status: \"booked\" },\n//       { roomNumber: 502, roomType: \"normal\", status: \"booked\" },\n//       { roomNumber: 503, roomType: \"normal\", status: \"booked\" },\n//       { roomNumber: 504, roomType: \"delux\", status: \"vacant\" },\n//       { roomNumber: 505, roomType: \"super delux\", status: \"booked\" },\n//       { roomNumber: 506, roomType: \"normal\", status: \"vacant\" },\n//     ],\n//   },\n// ];\n\n// const calculateTotals = (floors) => {\n//   return floors.reduce(\n//     (acc, floor) => {\n//       floor.rooms.forEach((room) => {\n//         acc.total += 1;\n//         if (room.status === \"vacant\") acc.available += 1;\n//         else acc.occupied += 1;\n//       });\n//       return acc;\n//     },\n//     { total: 0, available: 0, occupied: 0 }\n//   );\n// };\n\n// const Body = () => {\n//   const [selectedFloor, setSelectedFloor] = useState(\"all\");\n//   const [selectedType, setSelectedType] = useState(\"\");\n//   const [selectedStatus, setSelectedStatus] = useState(\"all\");\n//   const [selectedRoomDetails, setSelectedRoomDetails] = useState(null);\n//   const [openBookingModal, setOpenBookingModal] = useState(false);\n//   const [bookingFormData, setBookingFormData] = useState({\n//     companyName: \"\",\n//     phoneNo: \"\",\n//     email: \"\",\n//     fromDate: \"\",\n//     toDate: \"\",\n//     paymentType: \"MONTHLY\",\n//   });\n\n//   const totals = calculateTotals(sampleFloors);\n\n//   const filteredFloors = sampleFloors\n//     .filter((floor) =>\n//       selectedFloor === \"all\" ? true : floor.floorNumber === Number(selectedFloor)\n//     )\n//     .map((floor) => ({\n//       ...floor,\n//       rooms: floor.rooms.filter((room) => {\n//         const matchType = selectedType ? room.roomType === selectedType : true;\n//         const matchStatus =\n//           selectedStatus !== \"all\" ? room.status === selectedStatus : true;\n//         return matchType && matchStatus;\n//       }),\n//     }))\n//     .filter((floor) => floor.rooms.length > 0); // Skip empty floors\n\n//   const handleStatusClick = (status) => {\n//     setSelectedStatus((prevStatus) => (prevStatus === status ? \"all\" : status));\n//   };\n\n//   const handleOpenBookingModal = () => {\n//     setOpenBookingModal(true);\n//   };\n\n//   const handleCloseBookingModal = () => {\n//     setOpenBookingModal(false);\n//   };\n\n//   const handleBookingFormChange = (e) => {\n//     const { name, value } = e.target;\n//     setBookingFormData({\n//       ...bookingFormData,\n//       [name]: value,\n//     });\n//   };\n\n//   const handleBookRoom = () => {\n//     // Here you would implement the logic to book the room\n//     console.log(\"Booking data:\", {\n//       room: selectedRoomDetails,\n//       bookingDetails: bookingFormData,\n//     });\n\n//     // Close modal and reset form\n//     setOpenBookingModal(false);\n//     setBookingFormData({\n//       companyName: \"\",\n//       phoneNo: \"\",\n//       email: \"\",\n//       fromDate: \"\",\n//       toDate: \"\",\n//       paymentType: \"MONTHLY\",\n//     });\n\n//     // You might want to update the room status here as well\n//   };\n\n//   return (\n//     <>\n//       {/* Filters */}\n//       <Stack direction=\"row\" gap={8} ml={10} zIndex={1}>\n//         <FormControl sx={{ width: \"200px\", mt: 3 }}>\n//           <InputLabel>Floor</InputLabel>\n//           <Select\n//             label=\"Floor\"\n//             value={selectedFloor}\n//             onChange={(e) => setSelectedFloor(e.target.value)}\n//           >\n//             <MenuItem value=\"all\">All Floors</MenuItem>\n//             {sampleFloors.map((floor) => (\n//               <MenuItem key={floor.floorNumber} value={floor.floorNumber}>\n//                 Floor {floor.floorNumber}\n//               </MenuItem>\n//             ))}\n//           </Select>\n//         </FormControl>\n\n//         <FormControl sx={{ width: \"200px\", mt: 3 }}>\n//           <InputLabel>Room Type</InputLabel>\n//           <Select\n//             label=\"Room Type\"\n//             value={selectedType}\n//             onChange={(e) => setSelectedType(e.target.value)}\n//           >\n//             <MenuItem value=\"\">All Types</MenuItem>\n//             {roomTypes.map((type, index) => (\n//               <MenuItem key={index} value={type}>\n//                 {type}\n//               </MenuItem>\n//             ))}\n//           </Select>\n//         </FormControl>\n//       </Stack>\n\n//       {/* Main Content */}\n//       <Box display=\"flex\">\n//         <Box ml={10} mt={5} mr={2} width=\"65%\" height=\"75vh\" overflow=\"auto\" pr={2}>\n//           {filteredFloors.map((floor) => (\n//             <Accordion key={floor.floorNumber} defaultExpanded>\n//               <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n//                 <Box display=\"flex\" alignItems=\"center\">\n//                   <Box\n//                     sx={{\n//                       width: 20,\n//                       height: 20,\n//                       borderRadius: \"30%\",\n//                       backgroundColor: \"purple\",\n//                       mr: 1,\n//                       boxShadow:\n//                         \"rgba(0, 0, 0, 0.25) 0px 14px 28px, rgba(0, 0, 0, 0.22) 0px 10px 10px\",\n//                     }}\n//                   />\n//                   <Typography fontWeight=\"bold\">\n//                     Floor {floor.floorNumber}\n//                   </Typography>\n//                 </Box>\n//               </AccordionSummary>\n//               <AccordionDetails>\n//                 <Grid container spacing={2}>\n//                   {floor.rooms.map((room, index) => (\n//                     <Grid item key={index}>\n//                       <Card\n//                         sx={{\n//                           backgroundColor:\n//                             room.status === \"vacant\" ? \"#b2f5ca\" : \"#f7a6a6\",\n//                           boxShadow: 2,\n//                           borderRadius: 2,\n//                           textAlign: \"center\",\n//                           width: \"190px\",\n//                           height: \"90px\",\n//                           cursor: \"pointer\",\n//                         }}\n//                         onClick={() => {\n//                           const isSameRoom =\n//                             selectedRoomDetails &&\n//                             selectedRoomDetails.roomNumber === room.roomNumber &&\n//                             selectedRoomDetails.floorNumber === floor.floorNumber;\n\n//                           if (isSameRoom) {\n//                             setSelectedRoomDetails(null); // hide if same room is clicked again\n//                           } else {\n//                             setSelectedRoomDetails({\n//                               ...room,\n//                               floorNumber: floor.floorNumber,\n//                               user: room.status === \"booked\"\n//                                 ? {\n//                                   name: \"John Doe\",\n//                                   phone: \"9876543210\",\n//                                   email: \"john@example.com\"\n//                                 }\n//                                 : null\n//                             });\n//                           }\n//                         }}\n//                       >\n//                         <CardContent>\n//                           <Typography variant=\"h6\" fontWeight=\"bold\">\n//                             {room.roomNumber}\n//                           </Typography>\n//                           <Typography variant=\"body2\">{room.roomType}</Typography>\n//                         </CardContent>\n//                       </Card>\n//                     </Grid>\n//                   ))}\n//                 </Grid>\n//               </AccordionDetails>\n//             </Accordion>\n//           ))}\n//         </Box>\n//         <Stack>\n//           {/* Status Filter Panel */}\n//           <Box display=\"flex\" alignItems=\"flex-start\" gap={1} mt={5} height={'80px'}>\n//             <Divider orientation=\"vertical\" flexItem sx={{ height: \"60px\", borderColor: \"black\" }} />\n\n//             {/* All */}\n//             <Box\n//               onClick={() => handleStatusClick(\"all\")}\n//               sx={{\n//                 cursor: \"pointer\",\n//                 p: 1,\n//                 borderRadius: 2,\n//                 // backgroundColor: selectedStatus === \"all\" ? \"#e0e0e0\" : \"transparent\",\n//                 \"&:hover\": {\n//                   backgroundColor: \"#f5f5f5\",\n//                 },\n//               }}\n//             >\n//               <Typography fontWeight=\"bold\">All</Typography>\n//               <Box display=\"flex\" alignItems=\"center\" gap={0.5}>\n//                 <ApartmentIcon sx={{ color: \"black\" }} />\n//                 <Typography fontWeight=\"bold\" color=\"black\">{totals.total}</Typography>\n//               </Box>\n//             </Box>\n\n//             <Divider orientation=\"vertical\" flexItem sx={{ height: \"60px\", borderColor: \"black\" }} />\n\n//             {/* Available */}\n//             <Box\n//               onClick={() => handleStatusClick(\"vacant\")}\n//               sx={{\n//                 cursor: \"pointer\",\n//                 p: 1,\n//                 borderRadius: 2,\n//                 backgroundColor: selectedStatus === \"vacant\" ? \"#e0e0e0\" : \"transparent\",\n//                 \"&:hover\": {\n//                   backgroundColor: \"#f5f5f5\",\n//                 },\n//               }}\n//             >\n//               <Typography fontWeight=\"bold\">Available</Typography>\n//               <Box display=\"flex\" alignItems=\"center\" gap={0.5}>\n//                 <HotelIcon sx={{ color: \"green\" }} />\n//                 <Typography fontWeight=\"bold\" color=\"green\">{totals.available}</Typography>\n//               </Box>\n//             </Box>\n\n//             <Divider orientation=\"vertical\" flexItem sx={{ height: \"60px\", borderColor: \"black\" }} />\n\n//             {/* Occupied */}\n//             <Box\n//               onClick={() => handleStatusClick(\"booked\")}\n//               sx={{\n//                 cursor: \"pointer\",\n//                 p: 1,\n//                 borderRadius: 2,\n//                 backgroundColor: selectedStatus === \"booked\" ? \"#e0e0e0\" : \"transparent\",\n//                 \"&:hover\": {\n//                   backgroundColor: \"#f5f5f5\",\n//                 },\n//               }}\n//             >\n//               <Typography fontWeight=\"bold\">Occupied</Typography>\n//               <Box display=\"flex\" alignItems=\"center\" gap={0.5}>\n//                 <BedIcon sx={{ color: \"red\" }} />\n//                 <Typography fontWeight=\"bold\" color=\"red\">{totals.occupied}</Typography>\n//               </Box>\n//             </Box>\n//             <Divider orientation=\"vertical\" flexItem sx={{ height: \"60px\", borderColor: \"black\" }} />\n//           </Box>\n//           {selectedRoomDetails && (\n//             <Box\n//               mt={4}\n//               width={'520px'}\n//               borderRadius={2}\n//             >\n//               <Typography variant=\"h6\" fontWeight=\"bold\" mb={2} bgcolor='blueviolet' color=\"white\" textAlign={'center'}>\n//                 {selectedRoomDetails.status === \"vacant\"\n//                   ? \"Room Details\"\n//                   : \"Booked By\"}\n//               </Typography>\n\n//               {selectedRoomDetails.status === \"booked\" ? (\n//                 <Box sx={{pl:'20px'}} >\n//                   <Typography><strong>Name:</strong> {selectedRoomDetails.user.name}</Typography>\n//                   <Typography><strong>Phone:</strong> {selectedRoomDetails.user.phone}</Typography>\n//                   <Typography><strong>Email:</strong> {selectedRoomDetails.user.email}</Typography>\n//                 </Box>\n//               ) : (\n//                 <Box sx={{pl:'20px'}} display={'flex'} flexDirection={'column'} gap={1}>\n//                   <Typography><strong>Room No&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;&nbsp;</strong> {selectedRoomDetails.roomNumber}</Typography>\n//                   <Typography><strong>Floor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;&nbsp;</strong> {selectedRoomDetails.floorNumber}</Typography>\n//                   <Typography><strong>Room Type&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;&nbsp;</strong> {selectedRoomDetails.roomType}</Typography>\n//                   <Typography><strong>Status&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;&nbsp;</strong> {selectedRoomDetails.status}</Typography>\n//                   <Button \n//                     variant=\"contained\" \n//                     fullWidth \n//                     sx={{\n//                       bgcolor: 'radial-gradient(circle,rgba(160, 185, 229, 1) 87%, rgba(156, 186, 230, 1) 91%, rgba(148, 187, 233, 1) 100%);'\n//                     }}\n//                     onClick={handleOpenBookingModal}\n//                   >\n//                     book now\n//                   </Button>\n//                 </Box>\n//               )}\n//             </Box>\n//           )}\n\n//         </Stack>\n//       </Box>\n\n//       {/* Booking Modal */}\n//       <Dialog \n//         open={openBookingModal} \n//         onClose={handleCloseBookingModal}\n//         maxWidth=\"md\"\n//         fullWidth\n//       >\n//         <DialogTitle \n//           sx={{ \n//             bgcolor: 'blueviolet', \n//             color: 'white', \n//             textAlign: 'center',\n//             fontWeight: 'bold'\n//           }}\n//         >\n//           Book Room {selectedRoomDetails?.roomNumber}\n//         </DialogTitle>\n//         <DialogContent>\n//           <Grid container spacing={2} sx={{ mt: 1 }}>\n//             <Grid item xs={12} md={6}>\n//               <TextField\n//                 label=\"Company Name\"\n//                 name=\"companyName\"\n//                 value={bookingFormData.companyName}\n//                 onChange={handleBookingFormChange}\n//                 fullWidth\n//                 margin=\"normal\"\n//                 required\n//               />\n//             </Grid>\n//             <Grid item xs={12} md={6}>\n//               <TextField\n//                 label=\"Phone Number\"\n//                 name=\"phoneNo\"\n//                 value={bookingFormData.phoneNo}\n//                 onChange={handleBookingFormChange}\n//                 fullWidth\n//                 margin=\"normal\"\n//                 required\n//               />\n//             </Grid>\n//             <Grid item xs={12}>\n//               <TextField\n//                 label=\"Email\"\n//                 name=\"email\"\n//                 type=\"email\"\n//                 value={bookingFormData.email}\n//                 onChange={handleBookingFormChange}\n//                 fullWidth\n//                 margin=\"normal\"\n//                 required\n//               />\n//             </Grid>\n//             <Grid item xs={12} md={6}>\n//               <TextField\n//                 label=\"From Date\"\n//                 name=\"fromDate\"\n//                 type=\"date\"\n//                 value={bookingFormData.fromDate}\n//                 onChange={handleBookingFormChange}\n//                 fullWidth\n//                 margin=\"normal\"\n//                 required\n//                 InputLabelProps={{ shrink: true }}\n//               />\n//             </Grid>\n//             <Grid item xs={12} md={6}>\n//               <TextField\n//                 label=\"To Date\"\n//                 name=\"toDate\"\n//                 type=\"date\"\n//                 value={bookingFormData.toDate}\n//                 onChange={handleBookingFormChange}\n//                 fullWidth\n//                 margin=\"normal\"\n//                 required\n//                 InputLabelProps={{ shrink: true }}\n//               />\n//             </Grid>\n//             <Grid item xs={12}>\n//               <FormControl fullWidth margin=\"normal\" required>\n//                 <InputLabel>Payment Type</InputLabel>\n//                 <Select\n//                   name=\"paymentType\"\n//                   value={bookingFormData.paymentType}\n//                   onChange={handleBookingFormChange}\n//                   label=\"Payment Type\"\n//                 >\n//                   {paymentTypes.map((type) => (\n//                     <MenuItem key={type} value={type}>\n//                       {type}\n//                     </MenuItem>\n//                   ))}\n//                 </Select>\n//               </FormControl>\n//             </Grid>\n//           </Grid>\n//         </DialogContent>\n//         <DialogActions sx={{ p: 3, justifyContent: 'space-between' }}>\n//           <Button \n//             onClick={handleCloseBookingModal} \n//             variant=\"outlined\" \n//             color=\"error\"\n//             sx={{ width: '120px' }}\n//           >\n//             Cancel\n//           </Button>\n//           <Button \n//             onClick={handleBookRoom} \n//             variant=\"contained\" \n//             color=\"primary\"\n//             sx={{ \n//               width: '120px',\n//               bgcolor: 'blueviolet',\n//               '&:hover': {\n//                 bgcolor: '#6a0dad'\n//               }\n//             }}\n//           >\n//             Book\n//           </Button>\n//         </DialogActions>\n//       </Dialog>\n//     </>\n//   );\n// };\n\n// export default Body;","map":{"version":3,"names":[],"sources":["/home/manoranjan-parida/Desktop/csm/src/manager/Body.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\n// import {\n//   Accordion,\n//   AccordionDetails,\n//   AccordionSummary,\n//   Box,\n//   Button,\n//   Card,\n//   CardContent,\n//   Dialog,\n//   DialogActions,\n//   DialogContent,\n//   DialogTitle,\n//   Divider,\n//   FormControl,\n//   Grid,\n//   InputLabel,\n//   MenuItem,\n//   Select,\n//   Stack,\n//   TextField,\n//   Typography,\n// } from \"@mui/material\";\n// import ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\n// import ApartmentIcon from \"@mui/icons-material/Apartment\";\n// import HotelIcon from \"@mui/icons-material/Hotel\";\n// import BedIcon from \"@mui/icons-material/Bed\";\n\n// const roomTypes = [\"normal\", \"delux\", \"super delux\"];\n// const paymentTypes = [\"MONTHLY\", \"QUARTERLY\", \"YEARLY\"];\n\n// const sampleFloors = [\n//   {\n//     floorNumber: 1,\n//     rooms: [\n//       { roomNumber: 101, roomType: \"normal\", status: \"booked\" },\n//       { roomNumber: 102, roomType: \"delux\", status: \"vacant\" },\n//       { roomNumber: 103, roomType: \"super delux\", status: \"booked\" },\n//       { roomNumber: 104, roomType: \"normal\", status: \"booked\" },\n//     ],\n//   },\n//   {\n//     floorNumber: 2,\n//     rooms: [\n//       { roomNumber: 201, roomType: \"normal\", status: \"booked\" },\n//       { roomNumber: 202, roomType: \"normal\", status: \"booked\" },\n//       { roomNumber: 203, roomType: \"normal\", status: \"booked\" },\n//       { roomNumber: 204, roomType: \"delux\", status: \"vacant\" },\n//       { roomNumber: 205, roomType: \"super delux\", status: \"booked\" },\n//       { roomNumber: 206, roomType: \"normal\", status: \"vacant\" },\n//     ],\n//   },\n//   {\n//     floorNumber: 3,\n//     rooms: [\n//       { roomNumber: 301, roomType: \"normal\", status: \"booked\" },\n//       { roomNumber: 302, roomType: \"normal\", status: \"booked\" },\n//       { roomNumber: 303, roomType: \"normal\", status: \"booked\" },\n//       { roomNumber: 304, roomType: \"delux\", status: \"vacant\" },\n//       { roomNumber: 305, roomType: \"super delux\", status: \"booked\" },\n//       { roomNumber: 306, roomType: \"normal\", status: \"vacant\" },\n//     ],\n//   },\n//   {\n//     floorNumber: 4,\n//     rooms: [\n//       { roomNumber: 401, roomType: \"normal\", status: \"booked\" },\n//       { roomNumber: 402, roomType: \"normal\", status: \"booked\" },\n//       { roomNumber: 403, roomType: \"normal\", status: \"booked\" },\n//       { roomNumber: 404, roomType: \"delux\", status: \"vacant\" },\n//       { roomNumber: 405, roomType: \"super delux\", status: \"booked\" },\n//       { roomNumber: 406, roomType: \"normal\", status: \"vacant\" },\n//     ],\n//   },\n//   {\n//     floorNumber: 5,\n//     rooms: [\n//       { roomNumber: 501, roomType: \"normal\", status: \"booked\" },\n//       { roomNumber: 502, roomType: \"normal\", status: \"booked\" },\n//       { roomNumber: 503, roomType: \"normal\", status: \"booked\" },\n//       { roomNumber: 504, roomType: \"delux\", status: \"vacant\" },\n//       { roomNumber: 505, roomType: \"super delux\", status: \"booked\" },\n//       { roomNumber: 506, roomType: \"normal\", status: \"vacant\" },\n//     ],\n//   },\n// ];\n\n// const calculateTotals = (floors) => {\n//   return floors.reduce(\n//     (acc, floor) => {\n//       floor.rooms.forEach((room) => {\n//         acc.total += 1;\n//         if (room.status === \"vacant\") acc.available += 1;\n//         else acc.occupied += 1;\n//       });\n//       return acc;\n//     },\n//     { total: 0, available: 0, occupied: 0 }\n//   );\n// };\n\n// const Body = () => {\n//   const [selectedFloor, setSelectedFloor] = useState(\"all\");\n//   const [selectedType, setSelectedType] = useState(\"\");\n//   const [selectedStatus, setSelectedStatus] = useState(\"all\");\n//   const [selectedRoomDetails, setSelectedRoomDetails] = useState(null);\n//   const [openBookingModal, setOpenBookingModal] = useState(false);\n//   const [bookingFormData, setBookingFormData] = useState({\n//     companyName: \"\",\n//     phoneNo: \"\",\n//     email: \"\",\n//     fromDate: \"\",\n//     toDate: \"\",\n//     paymentType: \"MONTHLY\",\n//   });\n\n//   const totals = calculateTotals(sampleFloors);\n\n//   const filteredFloors = sampleFloors\n//     .filter((floor) =>\n//       selectedFloor === \"all\" ? true : floor.floorNumber === Number(selectedFloor)\n//     )\n//     .map((floor) => ({\n//       ...floor,\n//       rooms: floor.rooms.filter((room) => {\n//         const matchType = selectedType ? room.roomType === selectedType : true;\n//         const matchStatus =\n//           selectedStatus !== \"all\" ? room.status === selectedStatus : true;\n//         return matchType && matchStatus;\n//       }),\n//     }))\n//     .filter((floor) => floor.rooms.length > 0); // Skip empty floors\n\n//   const handleStatusClick = (status) => {\n//     setSelectedStatus((prevStatus) => (prevStatus === status ? \"all\" : status));\n//   };\n\n//   const handleOpenBookingModal = () => {\n//     setOpenBookingModal(true);\n//   };\n\n//   const handleCloseBookingModal = () => {\n//     setOpenBookingModal(false);\n//   };\n\n//   const handleBookingFormChange = (e) => {\n//     const { name, value } = e.target;\n//     setBookingFormData({\n//       ...bookingFormData,\n//       [name]: value,\n//     });\n//   };\n\n//   const handleBookRoom = () => {\n//     // Here you would implement the logic to book the room\n//     console.log(\"Booking data:\", {\n//       room: selectedRoomDetails,\n//       bookingDetails: bookingFormData,\n//     });\n    \n//     // Close modal and reset form\n//     setOpenBookingModal(false);\n//     setBookingFormData({\n//       companyName: \"\",\n//       phoneNo: \"\",\n//       email: \"\",\n//       fromDate: \"\",\n//       toDate: \"\",\n//       paymentType: \"MONTHLY\",\n//     });\n    \n//     // You might want to update the room status here as well\n//   };\n\n//   return (\n//     <>\n//       {/* Filters */}\n//       <Stack direction=\"row\" gap={8} ml={10} zIndex={1}>\n//         <FormControl sx={{ width: \"200px\", mt: 3 }}>\n//           <InputLabel>Floor</InputLabel>\n//           <Select\n//             label=\"Floor\"\n//             value={selectedFloor}\n//             onChange={(e) => setSelectedFloor(e.target.value)}\n//           >\n//             <MenuItem value=\"all\">All Floors</MenuItem>\n//             {sampleFloors.map((floor) => (\n//               <MenuItem key={floor.floorNumber} value={floor.floorNumber}>\n//                 Floor {floor.floorNumber}\n//               </MenuItem>\n//             ))}\n//           </Select>\n//         </FormControl>\n\n//         <FormControl sx={{ width: \"200px\", mt: 3 }}>\n//           <InputLabel>Room Type</InputLabel>\n//           <Select\n//             label=\"Room Type\"\n//             value={selectedType}\n//             onChange={(e) => setSelectedType(e.target.value)}\n//           >\n//             <MenuItem value=\"\">All Types</MenuItem>\n//             {roomTypes.map((type, index) => (\n//               <MenuItem key={index} value={type}>\n//                 {type}\n//               </MenuItem>\n//             ))}\n//           </Select>\n//         </FormControl>\n//       </Stack>\n\n//       {/* Main Content */}\n//       <Box display=\"flex\">\n//         <Box ml={10} mt={5} mr={2} width=\"65%\" height=\"75vh\" overflow=\"auto\" pr={2}>\n//           {filteredFloors.map((floor) => (\n//             <Accordion key={floor.floorNumber} defaultExpanded>\n//               <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n//                 <Box display=\"flex\" alignItems=\"center\">\n//                   <Box\n//                     sx={{\n//                       width: 20,\n//                       height: 20,\n//                       borderRadius: \"30%\",\n//                       backgroundColor: \"purple\",\n//                       mr: 1,\n//                       boxShadow:\n//                         \"rgba(0, 0, 0, 0.25) 0px 14px 28px, rgba(0, 0, 0, 0.22) 0px 10px 10px\",\n//                     }}\n//                   />\n//                   <Typography fontWeight=\"bold\">\n//                     Floor {floor.floorNumber}\n//                   </Typography>\n//                 </Box>\n//               </AccordionSummary>\n//               <AccordionDetails>\n//                 <Grid container spacing={2}>\n//                   {floor.rooms.map((room, index) => (\n//                     <Grid item key={index}>\n//                       <Card\n//                         sx={{\n//                           backgroundColor:\n//                             room.status === \"vacant\" ? \"#b2f5ca\" : \"#f7a6a6\",\n//                           boxShadow: 2,\n//                           borderRadius: 2,\n//                           textAlign: \"center\",\n//                           width: \"190px\",\n//                           height: \"90px\",\n//                           cursor: \"pointer\",\n//                         }}\n//                         onClick={() => {\n//                           const isSameRoom =\n//                             selectedRoomDetails &&\n//                             selectedRoomDetails.roomNumber === room.roomNumber &&\n//                             selectedRoomDetails.floorNumber === floor.floorNumber;\n\n//                           if (isSameRoom) {\n//                             setSelectedRoomDetails(null); // hide if same room is clicked again\n//                           } else {\n//                             setSelectedRoomDetails({\n//                               ...room,\n//                               floorNumber: floor.floorNumber,\n//                               user: room.status === \"booked\"\n//                                 ? {\n//                                   name: \"John Doe\",\n//                                   phone: \"9876543210\",\n//                                   email: \"john@example.com\"\n//                                 }\n//                                 : null\n//                             });\n//                           }\n//                         }}\n//                       >\n//                         <CardContent>\n//                           <Typography variant=\"h6\" fontWeight=\"bold\">\n//                             {room.roomNumber}\n//                           </Typography>\n//                           <Typography variant=\"body2\">{room.roomType}</Typography>\n//                         </CardContent>\n//                       </Card>\n//                     </Grid>\n//                   ))}\n//                 </Grid>\n//               </AccordionDetails>\n//             </Accordion>\n//           ))}\n//         </Box>\n//         <Stack>\n//           {/* Status Filter Panel */}\n//           <Box display=\"flex\" alignItems=\"flex-start\" gap={1} mt={5} height={'80px'}>\n//             <Divider orientation=\"vertical\" flexItem sx={{ height: \"60px\", borderColor: \"black\" }} />\n\n//             {/* All */}\n//             <Box\n//               onClick={() => handleStatusClick(\"all\")}\n//               sx={{\n//                 cursor: \"pointer\",\n//                 p: 1,\n//                 borderRadius: 2,\n//                 // backgroundColor: selectedStatus === \"all\" ? \"#e0e0e0\" : \"transparent\",\n//                 \"&:hover\": {\n//                   backgroundColor: \"#f5f5f5\",\n//                 },\n//               }}\n//             >\n//               <Typography fontWeight=\"bold\">All</Typography>\n//               <Box display=\"flex\" alignItems=\"center\" gap={0.5}>\n//                 <ApartmentIcon sx={{ color: \"black\" }} />\n//                 <Typography fontWeight=\"bold\" color=\"black\">{totals.total}</Typography>\n//               </Box>\n//             </Box>\n\n//             <Divider orientation=\"vertical\" flexItem sx={{ height: \"60px\", borderColor: \"black\" }} />\n\n//             {/* Available */}\n//             <Box\n//               onClick={() => handleStatusClick(\"vacant\")}\n//               sx={{\n//                 cursor: \"pointer\",\n//                 p: 1,\n//                 borderRadius: 2,\n//                 backgroundColor: selectedStatus === \"vacant\" ? \"#e0e0e0\" : \"transparent\",\n//                 \"&:hover\": {\n//                   backgroundColor: \"#f5f5f5\",\n//                 },\n//               }}\n//             >\n//               <Typography fontWeight=\"bold\">Available</Typography>\n//               <Box display=\"flex\" alignItems=\"center\" gap={0.5}>\n//                 <HotelIcon sx={{ color: \"green\" }} />\n//                 <Typography fontWeight=\"bold\" color=\"green\">{totals.available}</Typography>\n//               </Box>\n//             </Box>\n\n//             <Divider orientation=\"vertical\" flexItem sx={{ height: \"60px\", borderColor: \"black\" }} />\n\n//             {/* Occupied */}\n//             <Box\n//               onClick={() => handleStatusClick(\"booked\")}\n//               sx={{\n//                 cursor: \"pointer\",\n//                 p: 1,\n//                 borderRadius: 2,\n//                 backgroundColor: selectedStatus === \"booked\" ? \"#e0e0e0\" : \"transparent\",\n//                 \"&:hover\": {\n//                   backgroundColor: \"#f5f5f5\",\n//                 },\n//               }}\n//             >\n//               <Typography fontWeight=\"bold\">Occupied</Typography>\n//               <Box display=\"flex\" alignItems=\"center\" gap={0.5}>\n//                 <BedIcon sx={{ color: \"red\" }} />\n//                 <Typography fontWeight=\"bold\" color=\"red\">{totals.occupied}</Typography>\n//               </Box>\n//             </Box>\n//             <Divider orientation=\"vertical\" flexItem sx={{ height: \"60px\", borderColor: \"black\" }} />\n//           </Box>\n//           {selectedRoomDetails && (\n//             <Box\n//               mt={4}\n//               width={'520px'}\n//               borderRadius={2}\n//             >\n//               <Typography variant=\"h6\" fontWeight=\"bold\" mb={2} bgcolor='blueviolet' color=\"white\" textAlign={'center'}>\n//                 {selectedRoomDetails.status === \"vacant\"\n//                   ? \"Room Details\"\n//                   : \"Booked By\"}\n//               </Typography>\n\n//               {selectedRoomDetails.status === \"booked\" ? (\n//                 <Box sx={{pl:'20px'}} >\n//                   <Typography><strong>Name:</strong> {selectedRoomDetails.user.name}</Typography>\n//                   <Typography><strong>Phone:</strong> {selectedRoomDetails.user.phone}</Typography>\n//                   <Typography><strong>Email:</strong> {selectedRoomDetails.user.email}</Typography>\n//                 </Box>\n//               ) : (\n//                 <Box sx={{pl:'20px'}} display={'flex'} flexDirection={'column'} gap={1}>\n//                   <Typography><strong>Room No&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;&nbsp;</strong> {selectedRoomDetails.roomNumber}</Typography>\n//                   <Typography><strong>Floor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;&nbsp;</strong> {selectedRoomDetails.floorNumber}</Typography>\n//                   <Typography><strong>Room Type&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;&nbsp;</strong> {selectedRoomDetails.roomType}</Typography>\n//                   <Typography><strong>Status&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;&nbsp;</strong> {selectedRoomDetails.status}</Typography>\n//                   <Button \n//                     variant=\"contained\" \n//                     fullWidth \n//                     sx={{\n//                       bgcolor: 'radial-gradient(circle,rgba(160, 185, 229, 1) 87%, rgba(156, 186, 230, 1) 91%, rgba(148, 187, 233, 1) 100%);'\n//                     }}\n//                     onClick={handleOpenBookingModal}\n//                   >\n//                     book now\n//                   </Button>\n//                 </Box>\n//               )}\n//             </Box>\n//           )}\n\n//         </Stack>\n//       </Box>\n\n//       {/* Booking Modal */}\n//       <Dialog \n//         open={openBookingModal} \n//         onClose={handleCloseBookingModal}\n//         maxWidth=\"md\"\n//         fullWidth\n//       >\n//         <DialogTitle \n//           sx={{ \n//             bgcolor: 'blueviolet', \n//             color: 'white', \n//             textAlign: 'center',\n//             fontWeight: 'bold'\n//           }}\n//         >\n//           Book Room {selectedRoomDetails?.roomNumber}\n//         </DialogTitle>\n//         <DialogContent>\n//           <Grid container spacing={2} sx={{ mt: 1 }}>\n//             <Grid item xs={12} md={6}>\n//               <TextField\n//                 label=\"Company Name\"\n//                 name=\"companyName\"\n//                 value={bookingFormData.companyName}\n//                 onChange={handleBookingFormChange}\n//                 fullWidth\n//                 margin=\"normal\"\n//                 required\n//               />\n//             </Grid>\n//             <Grid item xs={12} md={6}>\n//               <TextField\n//                 label=\"Phone Number\"\n//                 name=\"phoneNo\"\n//                 value={bookingFormData.phoneNo}\n//                 onChange={handleBookingFormChange}\n//                 fullWidth\n//                 margin=\"normal\"\n//                 required\n//               />\n//             </Grid>\n//             <Grid item xs={12}>\n//               <TextField\n//                 label=\"Email\"\n//                 name=\"email\"\n//                 type=\"email\"\n//                 value={bookingFormData.email}\n//                 onChange={handleBookingFormChange}\n//                 fullWidth\n//                 margin=\"normal\"\n//                 required\n//               />\n//             </Grid>\n//             <Grid item xs={12} md={6}>\n//               <TextField\n//                 label=\"From Date\"\n//                 name=\"fromDate\"\n//                 type=\"date\"\n//                 value={bookingFormData.fromDate}\n//                 onChange={handleBookingFormChange}\n//                 fullWidth\n//                 margin=\"normal\"\n//                 required\n//                 InputLabelProps={{ shrink: true }}\n//               />\n//             </Grid>\n//             <Grid item xs={12} md={6}>\n//               <TextField\n//                 label=\"To Date\"\n//                 name=\"toDate\"\n//                 type=\"date\"\n//                 value={bookingFormData.toDate}\n//                 onChange={handleBookingFormChange}\n//                 fullWidth\n//                 margin=\"normal\"\n//                 required\n//                 InputLabelProps={{ shrink: true }}\n//               />\n//             </Grid>\n//             <Grid item xs={12}>\n//               <FormControl fullWidth margin=\"normal\" required>\n//                 <InputLabel>Payment Type</InputLabel>\n//                 <Select\n//                   name=\"paymentType\"\n//                   value={bookingFormData.paymentType}\n//                   onChange={handleBookingFormChange}\n//                   label=\"Payment Type\"\n//                 >\n//                   {paymentTypes.map((type) => (\n//                     <MenuItem key={type} value={type}>\n//                       {type}\n//                     </MenuItem>\n//                   ))}\n//                 </Select>\n//               </FormControl>\n//             </Grid>\n//           </Grid>\n//         </DialogContent>\n//         <DialogActions sx={{ p: 3, justifyContent: 'space-between' }}>\n//           <Button \n//             onClick={handleCloseBookingModal} \n//             variant=\"outlined\" \n//             color=\"error\"\n//             sx={{ width: '120px' }}\n//           >\n//             Cancel\n//           </Button>\n//           <Button \n//             onClick={handleBookRoom} \n//             variant=\"contained\" \n//             color=\"primary\"\n//             sx={{ \n//               width: '120px',\n//               bgcolor: 'blueviolet',\n//               '&:hover': {\n//                 bgcolor: '#6a0dad'\n//               }\n//             }}\n//           >\n//             Book\n//           </Button>\n//         </DialogActions>\n//       </Dialog>\n//     </>\n//   );\n// };\n\n// export default Body;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}