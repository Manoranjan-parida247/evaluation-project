{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nexport const adminApi = createApi({\n  reducerPath: \"adminApi\",\n  //   baseQuery: fetchBaseQuery({ baseUrl: \"http://localhost:3000/\" }), // json-server url\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"http://192.168.12.51:9000/\",\n    prepareHeaders: headers => {\n      const token = localStorage.getItem(\"token\");\n      if (token) {\n        console.log(\"Setting Authorization header\");\n        headers.set(\"Authorization\", `Bearer ${token}`);\n      }\n      headers.set(\"Content-Type\", \"application/json\");\n      return headers;\n    }\n  }),\n  tagTypes: [\"Admins\"],\n  endpoints: builder => ({\n    //login of super admin\n    loginSuperAdmin: builder.mutation({\n      query: ({\n        email,\n        password\n      }) => ({\n        url: '/login',\n        method: 'POST',\n        body: {\n          email,\n          password\n        }\n      })\n    }),\n    // ✅ Get All Admins\n    // getAdmins: builder.query({\n    //     query: () => \"/admins\",\n    //     providesTags: [\"Admins\"],\n    // }),\n\n    //get all company details\n    getCompanies: builder.query({\n      query: () => ({\n        url: '/api/get/all/company',\n        method: 'GET'\n      }),\n      providesTags: [\"Admins\"]\n    }),\n    // ✅ Get Single Admin by ID\n    // getAdmin: builder.query({\n    //     query: (id) => `/admins/${id}`,\n    //     providesTags: [\"Admins\"],\n    // }),\n\n    getCompany: builder.query({\n      query: id => ({\n        url: `api/get/company/${id}`,\n        method: 'GET'\n      }),\n      providesTags: [\"Admins\"]\n    }),\n    // ✅ Add New Admin (POST) and company\n    addAdmin: builder.mutation({\n      query: newAdmin => ({\n        url: \"/api/register/company\",\n        method: \"POST\",\n        body: newAdmin\n      }),\n      invalidatesTags: [\"Admins\"] // naye admin ke baad refetch\n    }),\n    // ✅ Update Existing Admin (POST but with ID)\n    updateAdmin: builder.mutation({\n      query: updatedData => ({\n        url: \"/api/register/company\",\n        // id ke upar POST karna\n        method: \"POST\",\n        body: updatedData\n      }),\n      invalidatesTags: [\"Admins\"] // update ke baad refetch\n    })\n  })\n});\n\n// ✅ Exports\nexport const {\n  useGetCompaniesQuery,\n  useGetCompanyQuery,\n  useAddAdminMutation,\n  useUpdateAdminMutation,\n  useLoginSuperAdminMutation\n} = adminApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","adminApi","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","token","localStorage","getItem","console","log","set","tagTypes","endpoints","builder","loginSuperAdmin","mutation","query","email","password","url","method","body","getCompanies","providesTags","getCompany","id","addAdmin","newAdmin","invalidatesTags","updateAdmin","updatedData","useGetCompaniesQuery","useGetCompanyQuery","useAddAdminMutation","useUpdateAdminMutation","useLoginSuperAdminMutation"],"sources":["/home/manoranjan-parida/Desktop/csm/src/app/adminApi.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\nexport const adminApi = createApi({\n    reducerPath: \"adminApi\",\n    //   baseQuery: fetchBaseQuery({ baseUrl: \"http://localhost:3000/\" }), // json-server url\n    baseQuery: fetchBaseQuery({\n        baseUrl: \"http://192.168.12.51:9000/\",\n        prepareHeaders: (headers) => {\n          const token = localStorage.getItem(\"token\");\n          if (token) {\n            console.log(\"Setting Authorization header\");\n            headers.set(\"Authorization\", `Bearer ${token}`);\n          }\n          headers.set(\"Content-Type\", \"application/json\");\n          return headers;\n        },\n      }),\n\n    tagTypes: [\"Admins\"],\n\n    endpoints: (builder) => ({\n\n        //login of super admin\n        loginSuperAdmin: builder.mutation({\n            query: ({ email, password }) => ({\n                url: '/login',\n                method: 'POST',\n                body: {\n                    email,\n                    password\n                }\n            })\n        }),\n\n        // ✅ Get All Admins\n        // getAdmins: builder.query({\n        //     query: () => \"/admins\",\n        //     providesTags: [\"Admins\"],\n        // }),\n\n        //get all company details\n        getCompanies: builder.query({\n            query: () => ({\n              url: '/api/get/all/company',\n              method: 'GET',\n            }),\n            providesTags: [\"Admins\"],\n          }),\n          \n\n        // ✅ Get Single Admin by ID\n        // getAdmin: builder.query({\n        //     query: (id) => `/admins/${id}`,\n        //     providesTags: [\"Admins\"],\n        // }),\n\n        getCompany: builder.query({\n            query: (id) => ({\n                url: `api/get/company/${id}`,\n                method: 'GET',\n            }),\n            providesTags: [\"Admins\"],\n        }),        \n\n        // ✅ Add New Admin (POST) and company\n        addAdmin: builder.mutation({\n            query: (newAdmin) => ({\n                url: \"/api/register/company\",\n                method: \"POST\",\n                body: newAdmin,\n            }),\n            invalidatesTags: [\"Admins\"], // naye admin ke baad refetch\n        }),\n\n        // ✅ Update Existing Admin (POST but with ID)\n        updateAdmin: builder.mutation({\n            query: (updatedData) => ({\n                url: \"/api/register/company\", // id ke upar POST karna\n                method: \"POST\",\n                body: updatedData,\n            }),\n            invalidatesTags: [\"Admins\"], // update ke baad refetch\n        }),\n\n    }),\n});\n\n// ✅ Exports\nexport const {\n    useGetCompaniesQuery,\n    useGetCompanyQuery,\n    useAddAdminMutation,\n    useUpdateAdminMutation,\n    useLoginSuperAdminMutation\n} = adminApi;\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AAExE,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAAC;EAC9BG,WAAW,EAAE,UAAU;EACvB;EACAC,SAAS,EAAEH,cAAc,CAAC;IACtBI,OAAO,EAAE,4BAA4B;IACrCC,cAAc,EAAGC,OAAO,IAAK;MAC3B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAIF,KAAK,EAAE;QACTG,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;QAC3CL,OAAO,CAACM,GAAG,CAAC,eAAe,EAAE,UAAUL,KAAK,EAAE,CAAC;MACjD;MACAD,OAAO,CAACM,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;MAC/C,OAAON,OAAO;IAChB;EACF,CAAC,CAAC;EAEJO,QAAQ,EAAE,CAAC,QAAQ,CAAC;EAEpBC,SAAS,EAAGC,OAAO,KAAM;IAErB;IACAC,eAAe,EAAED,OAAO,CAACE,QAAQ,CAAC;MAC9BC,KAAK,EAAEA,CAAC;QAAEC,KAAK;QAAEC;MAAS,CAAC,MAAM;QAC7BC,GAAG,EAAE,QAAQ;QACbC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAE;UACFJ,KAAK;UACLC;QACJ;MACJ,CAAC;IACL,CAAC,CAAC;IAEF;IACA;IACA;IACA;IACA;;IAEA;IACAI,YAAY,EAAET,OAAO,CAACG,KAAK,CAAC;MACxBA,KAAK,EAAEA,CAAA,MAAO;QACZG,GAAG,EAAE,sBAAsB;QAC3BC,MAAM,EAAE;MACV,CAAC,CAAC;MACFG,YAAY,EAAE,CAAC,QAAQ;IACzB,CAAC,CAAC;IAGJ;IACA;IACA;IACA;IACA;;IAEAC,UAAU,EAAEX,OAAO,CAACG,KAAK,CAAC;MACtBA,KAAK,EAAGS,EAAE,KAAM;QACZN,GAAG,EAAE,mBAAmBM,EAAE,EAAE;QAC5BL,MAAM,EAAE;MACZ,CAAC,CAAC;MACFG,YAAY,EAAE,CAAC,QAAQ;IAC3B,CAAC,CAAC;IAEF;IACAG,QAAQ,EAAEb,OAAO,CAACE,QAAQ,CAAC;MACvBC,KAAK,EAAGW,QAAQ,KAAM;QAClBR,GAAG,EAAE,uBAAuB;QAC5BC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEM;MACV,CAAC,CAAC;MACFC,eAAe,EAAE,CAAC,QAAQ,CAAC,CAAE;IACjC,CAAC,CAAC;IAEF;IACAC,WAAW,EAAEhB,OAAO,CAACE,QAAQ,CAAC;MAC1BC,KAAK,EAAGc,WAAW,KAAM;QACrBX,GAAG,EAAE,uBAAuB;QAAE;QAC9BC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAES;MACV,CAAC,CAAC;MACFF,eAAe,EAAE,CAAC,QAAQ,CAAC,CAAE;IACjC,CAAC;EAEL,CAAC;AACL,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EACTG,oBAAoB;EACpBC,kBAAkB;EAClBC,mBAAmB;EACnBC,sBAAsB;EACtBC;AACJ,CAAC,GAAGpC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}